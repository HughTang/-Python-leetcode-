#
# @lc app=leetcode.cn id=204 lang=python3
#
# [204] 计数质数
#

# @lc code=start
class Solution:
    # 解题方法：埃氏筛
    # 
    # 考虑这样一个事实：如果x是质数，那么大于x的x的倍数2x,3x,… 一定不是质数，因此我们可以从这里入手。
    # 
    # （1）设isPrime[i]表示数i是不是质数，如果是质数则为1，否则为0。从小到大遍历每个数，如果这个数为质数，则将其所有的倍数都标记为合数
    # （除了该质数本身），即0，这样在运行结束的时候我们即能知道质数的个数。
    # 
    # （2）这种方法的正确性是比较显然的：这种方法显然不会将质数标记成合数；另一方面，当从小到大遍历到数x时，倘若它是合数，则它一定是某个小于
    # x的质数y的整数倍，故根据此方法的步骤，我们在遍历到y时，就一定会在此时将x标记为isPrime[x]=0。因此，这种方法也不会将合数标记为质数。
    # 
    # （3）当然这里还可以继续优化，对于一个质数x，如果按上文说的我们从2x开始标记其实是冗余的，应该直接从x*x开始标记，因为2x,3x,… 这些数一定在
    # x之前就被其他数的倍数标记过了，例如2的所有倍数，3的所有倍数等。

    def countPrimes(self, n: int) -> int:
        # 如果n<=2，则不存在质数。直接返回0
        if n <= 2:
            return 0
        # isPrimes列表用于存储每个下标对应的是否是质数，初始化为n个1
        isPrimes = [1] * n
        # 将0和1下标所对应的数值设置为0，因为0和1都不是质数
        isPrimes[0] = isPrimes[1] = 0
        # 从下标2开始循环
        for i in range(2, n):
            # 如果当前元素为质数则从i*i开始，以i为步长，将所有i的倍数下标元素设置为0
            if isPrimes[i]:
                for j in range(i*i, n, i):
                    isPrimes[j] = 0
        # 返回isPrimes的元素和，即为所求的质数个数
        return sum(isPrimes)      
# @lc code=end

