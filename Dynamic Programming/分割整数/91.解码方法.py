#
# @lc app=leetcode.cn id=91 lang=python3
#
# [91] 解码方法
#

# @lc code=start
class Solution:
    # 算法思想：
    # 对于给定的字符串s，设它的长度为n，其中的字符从左到右依次为s[1],s[2],⋯,s[n]。我们可以使用动态规划的方法计算出字符串s的解码方法数。
    # 具体地，设dp[i]表示字符串s的前i个字符s[1..i]的解码方法数。在进行状态转移时，我们可以考虑最后一次解码使用了s中的哪些字符，那么会有下面的两种情况：
    # 第一种情况是我们使用了一个字符，即s[i]进行解码，那么只要s[i]≠0，它就可以被解码成A∼I中的某个字母。由于剩余的前i−1个字符的解码方法数为dp[i-1]，因此状态转移方程：dp[i] = dp[i-1]
    # 第二种情况是我们使用了两个字符，即s[i−1]和s[i]进行编码。与第一种情况类似，s[i−1]≠0，并且s[i−1]和s[i]组成的整数必须小于等于26，这样它们就可以被解码成J∼Z中的某个字母。由于剩余的前i-2个字符的解码方法数为dp[i-2]，因此状态转移方程：dp[i] = dp[i-2]
    # 需要注意的是，只有当 i>1 时才能进行转移，否则 s[i−1] 不存在。
    # 将上面的两种状态转移方程在对应的条件满足时进行累加，即可得到dp[i]的值。
    #
    # 细节：
    # 动态规划的边界条件为：dp[0] = 1,即空字符串可以有1种解码方法，解码出一个空字符串。
    # 同时，由于在大部分语言中，字符串的下标是从0而不是1开始的，因此在代码的编写过程中，我们需要将所有字符串的下标减去1，与使用的语言保持一致。
    # 
    # 复杂度分析：
    # 时间复杂度：O(n)，其中n是字符串s的长度。
    # 空间复杂度：O(n)或O(1)。如果使用数组进行状态转移，空间复杂度为 O(n)；如果仅使用三个变量，空间复杂度为O(1)。
    def numDecodings(self, s: str) -> int:
        n = len(s)
        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 0 if s[0] == '0' else 1
        for i in range(2,n+1):
            # one step jump
            if 0 < int(s[i-1]) <= 9:
                dp[i] += dp[i-1]
            # two step jump
            if 10 <= int(s[i-2:i]) <= 26:
                dp[i] += dp[i-2]
        return dp[-1]
# @lc code=end

